// Name:            Position
// Description:     Utilities to position content
//
// Component:       `uk-position-absolute`
//                  `uk-position-relative`
//                  `uk-position-z-index`
//                  `uk-position-top`
//                  `uk-position-bottom`
//                  `uk-position-left`
//                  `uk-position-right`
//                  `uk-position-top-left`
//                  `uk-position-top-center`
//                  `uk-position-top-right`
//                  `uk-position-bottom-left`
//                  `uk-position-bottom-center`
//                  `uk-position-bottom-right`
//                  `uk-position-center`
//                  `uk-position-center-left`
//                  `uk-position-center-right`
//                  `uk-position-cover`
//
// Modifiers:       `uk-position-small`
//                  `uk-position-medium`
//                  `uk-position-large`
//
// ========================================================================


// Variables
// ========================================================================

.uk-position,
[class*='uk-position-'] {

    --position-small-margin:                                 var(--global-small-gutter);
    --position-medium-margin:                                var(--global-gutter);
    --position-large-margin:                                 var(--global-gutter);

}

@media (min-width: $breakpoint-large) {

    .uk-position,
    [class*='uk-position-'] {

        --position-large-margin:                            50px;

    }

}


/* ========================================================================
   Component: Position
 ========================================================================== */

:root { --uk-position-margin-offset: 0px; }


/* Directions
 ========================================================================== */

/*
 * 1. Prevent content overflow.
 */

[class*='uk-position-top'],
[class*='uk-position-bottom'],
[class*='uk-position-left'],
[class*='uk-position-right'],
[class*='uk-position-center'] {
    position: absolute !important;
    /* 1 */
    max-inline-size: unquote('calc(100% - (var(--uk-position-margin-offset) * 2))');
    box-sizing: border-box;
}

/*
 * Edges
 * Don't use `width: 100%` because it's wrong if the parent has padding.
 */

.uk-position-top {
    inset-block-start: 0;
    inset-inline-start: 0;
    inset-inline-end: 0;
}

.uk-position-bottom {
    inset-block-end: 0;
    inset-inline-start: 0;
    inset-inline-end: 0;
}

.uk-position-left {
    inset-block-start: 0;
    inset-block-end: 0;
    inset-inline-start: 0;
}

.uk-position-right {
    inset-block-start: 0;
    inset-block-end: 0;
    inset-inline-end: 0;
}

/*
 * Corners
 */

.uk-position-top-left {
    inset-block-start: 0;
    inset-inline-start: 0;
}

.uk-position-top-right {
    inset-block-start: 0;
    inset-inline-end: 0;
}

.uk-position-bottom-left {
    inset-block-end: 0;
    inset-inline-start: 0;
}

.uk-position-bottom-right {
    inset-block-end: 0;
    inset-inline-end: 0;
}

/*
 * Center
 * 1. Fix text wrapping if content is larger than 50% of the container.
 *    Using `max-content` requires `max-width` of 100% which is set generally.
 */

.uk-position-center {
    inset-block-start: unquote('calc(50% - var(--uk-position-margin-offset))');
    inset-inline-start: unquote('calc(50% - var(--uk-position-margin-offset))');
    --uk-position-translate-x: -50%;
    --uk-position-translate-y: -50%;
    transform: translate(var(--uk-position-translate-x), var(--uk-position-translate-y));
    /* 1 */
    inline-size: max-content;
}

/* Vertical */
[class*='uk-position-center-left'],
[class*='uk-position-center-right'] {
    inset-block-start: unquote('calc(50% - var(--uk-position-margin-offset))');
    --uk-position-translate-y: -50%;
    transform: translate(0, var(--uk-position-translate-y));
}

.uk-position-center-left { inset-inline-start: 0; }
.uk-position-center-right { inset-inline-end: 0; }

.uk-position-center-left-out {
    inset-inline-end: 100%;
    inline-size: max-content;
}

.uk-position-center-right-out {
    inset-inline-start: 100%;
    inline-size: max-content;
}

/* Horizontal */
.uk-position-top-center,
.uk-position-bottom-center {
    inset-inline-start: unquote('calc(50% - var(--uk-position-margin-offset))');
    --uk-position-translate-x: -50%;
    transform: translate(var(--uk-position-translate-x), 0);
    /* 1 */
    inline-size: max-content;
}

.uk-position-top-center { inset-block-start: 0; }
.uk-position-bottom-center { inset-block-end: 0; }

/*
 * Cover
 */

.uk-position-cover {
    position: absolute;
    inset-block-start: 0;
    inset-block-end: 0;
    inset-inline-start: 0;
    inset-inline-end: 0;
}


/* Margin
 ========================================================================== */

.uk-position-small {
    margin: var(--position-small-margin);
    --uk-position-margin-offset: var(--position-small-margin);
}

.uk-position-medium {
    margin: var(--position-medium-margin);
    --uk-position-margin-offset: var(--position-medium-margin);
}

.uk-position-large {
    margin: var(--position-large-margin);
    --uk-position-margin-offset: var(--position-large-margin);
}


/* Schemes
 ========================================================================== */

.uk-position-relative { position: relative  !important; }
.uk-position-absolute { position: absolute  !important; }
.uk-position-fixed { position: fixed  !important; }
.uk-position-sticky { position: sticky  !important; }


/* Layer
 ========================================================================== */

.uk-position-z-index { z-index: 1; }

.uk-position-z-index-negative { z-index: -1; }
